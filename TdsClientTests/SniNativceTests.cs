using System.Reflection.Metadata;
using System.Threading.Tasks;
using Medella.TdsClient.Contants;
using Medella.TdsClient.TdsStream.Native;
using Xunit;

namespace TdsClientTests
{
    public class SniNativceTests
    {
        public static byte[] connect =
        {
            0x12, 0x01, 0x00, 0x58, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x06, 0x01, 0x00, 0x25, 0x00, 0x01, 0x02, 0x00, 0x26, 0x00, 0x01, 0x03, 0x00, 0x27, 0x00, 0x04, 0x04, 0x00, 0x2B, 0x00, 0x01, 0x05, 0x00, 0x2C, 0x00, 0x24, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };

        public static byte[] login = { 0x10, 0x01, 0x01, 0xA3, 0x00, 0x00, 0x01, 0x00, 0x9B, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x74, 0x40, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x2A, 0x2A, 0x2A, 0x2A, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x83, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x21, 0x00, 0xB2, 0x00, 0x0A, 0x00, 0xC6, 0x00, 0x04, 0x00, 0xCA, 0x00, 0x21, 0x00, 0x0C, 0x01, 0x00, 0x00, 0x0C, 0x01, 0x03, 0x00, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x12, 0x01, 0x7E, 0x00, 0x90, 0x01, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x41, 0x00, 0x50, 0x00, 0x54, 0x00, 0x4F, 0x00, 0x50, 0x00, 0x2D, 0x00, 0x54, 0x00, 0x4B, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x65, 0x00, 0x20, 0x00, 0x2E, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x71, 0x00, 0x6C, 0x00, 0x43, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x44, 0x00, 0x61, 0x00, 0x74, 0x00, 0x61, 0x00, 0x20, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x69, 0x00, 0x64, 0x00, 0x65, 0x00, 0x72, 0x00, 0x74, 0x00, 0x63, 0x00, 0x70, 0x00, 0x3A, 0x00, 0x2E, 0x00, 0x2C, 0x00, 0x31, 0x00, 0x34, 0x00, 0x33, 0x00, 0x33, 0x00, 0x90, 0x01, 0x00, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x65, 0x00, 0x20, 0x00, 0x2E, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x71, 0x00, 0x6C, 0x00, 0x43, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x44, 0x00, 0x61, 0x00, 0x74, 0x00, 0x61, 0x00, 0x20, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x69, 0x00, 0x64, 0x00, 0x65, 0x00, 0x72, 0x00, 0x74, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x60, 0x7C, 0x06, 0x06, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x02, 0xA0, 0x72, 0x30, 0x70, 0xA0, 0x30, 0x30, 0x2E, 0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x02, 0x02, 0x0A, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x82, 0xF7, 0x12, 0x01, 0x02, 0x02, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x12, 0x01, 0x02, 0x02, 0x06, 0x0A, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x02, 0x02, 0x1E, 0xA2, 0x3C, 0x04, 0x3A, 0x4E, 0x54, 0x4C, 0x4D, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0x97, 0xB2, 0x08, 0xE2, 0x09, 0x00, 0x09, 0x00, 0x31, 0x00, 0x00, 0x00, 0x09, 0x00, 0x09, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xAB, 0x3F, 0x00, 0x00, 0x00, 0x0F, 0x4C, 0x41, 0x50, 0x54, 0x4F, 0x50, 0x2D, 0x54, 0x4B, 0x57, 0x4F, 0x52, 0x4B, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0xFF };
        public static byte[] sspi = { 0x11, 0x01, 0x00, 0x81, 0x00, 0x00, 0x01, 0x00, 0xA1, 0x77, 0x30, 0x75, 0xA0, 0x03, 0x0A, 0x01, 0x01, 0xA2, 0x5A, 0x04, 0x58, 0x4E, 0x54, 0x4C, 0x4D, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x15, 0xC2, 0x88, 0xE2, 0x0A, 0x00, 0xAB, 0x3F, 0x00, 0x00, 0x00, 0x0F, 0xA8, 0x2E, 0xED, 0xFF, 0xF1, 0xB1, 0x5C, 0x09, 0xEF, 0x4E, 0xC5, 0xE2, 0xB7, 0x83, 0x89, 0x04, 0xA3, 0x12, 0x04, 0x10, 0x01, 0x00, 0x00, 0x00, 0x20, 0x0E, 0xB1, 0x31, 0x22, 0x71, 0x0D, 0x7F, 0x00, 0x00, 0x00, 0x00 };

        [Fact]
        public void can_LoadHandle()
        {
            var m= new TdsStreamNative("tcp:.,1433",15);
            var buffer = connect;
            m.FlushBuffer(buffer, connect.Length);
            var readBuffer = new byte[8000];
            var len=m.Receive(readBuffer, 0, readBuffer.Length);
            Assert.Equal(48,len);
            m.FlushBuffer(login, login.Length);
            len= m.Receive(readBuffer, 0, readBuffer.Length);
            Assert.Equal(220,len);
            m.FlushBuffer(sspi, sspi.Length);
            len = m.Receive(readBuffer, 0, readBuffer.Length);
            Assert.Equal(254, len);


            //Assert.Equal(TdsEnums.SNI_SUCCESS, SniLoadHandle.SingletonInstance.SniStatus);
            //var handle = new SniNativeHandle("tcp:.,1433", 15, out byte[] instanceName);
            //Assert.Equal(256, instanceName.Length);
            //Assert.Equal(TdsEnums.SNI_SUCCESS, handle.Status);

            //var clientConnectionId = new Guid();
            //SNINativeMethodWrapper.SniGetConnectionId(handle, ref clientConnectionId);
            //Assert.NotEqual(new Guid(), clientConnectionId);
            //var packet = new SNIPacket(handle);
            //Assert.False(packet.IsInvalid);
            //var buffer = connect;
            //var bytesUsed = connect.Length;
            //SNINativeMethodWrapper.SNIPacketSetData(packet, buffer, bytesUsed);
            //SNINativeMethodWrapper.SNIWritePacket(handle, packet, true);

            //IntPtr readPacketPtr = IntPtr.Zero;
            //var error = SNINativeMethodWrapper.SNIReadSyncOverAsync(handle, ref readPacketPtr, 15000);
            //Assert.Equal((uint)0, error);
            //Assert.NotEqual(IntPtr.Zero, readPacketPtr);
            //var ReadBuffer = new byte[8000];
            //uint dataSize = 0;
            //SNINativeMethodWrapper.SNIPacketGetData(readPacketPtr, ReadBuffer, ref dataSize);
        }
    }
}